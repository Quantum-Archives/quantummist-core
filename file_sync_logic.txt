# 🧷 FILE_SYNC_LOGIC.md – Logika synchronizacji plików QuantumMist

## 🎯 Cel
Stworzenie przejrzystego systemu zarządzania synchronizacją lokalnych plików z zewnętrznymi źródłami:
- Google Drive (backupy, dane, pliki przesłane przez użytkowników)
- GitHub (kod projektu, exporty kanw, konfiguracja systemu)

---

## 🗂 Struktura katalogów (lokalna)
```
/srv/quantummist/
├── frontend/
├── ishkarim_admin/
├── modale/
├── sloty_ai/
├── logs/
├── user_journals/
├── kanwy/
├── sync_drive/       ← pliki do wysyłki na GDrive
├── sync_github/      ← pliki do push na GitHub
└── sync_config.json  ← konfiguracja aliasów
```

---

## 🔁 Synchronizacja – GDrive (via rclone)

### 📄 `sync_config.json`
```json
{
  "aliases": {
    "archiwum": "1A_yVIj_1BLGO6WwlzAGv2O5dCA4kE0Fp",
    "grafiki": "1B1jhPNTlI1HPUpC216d0WYJaP5IniSKT",
    "to_process": "1252L6D0vHESo-urc4Rsts5yANwx1eToR",
    "backupy_zip": "1hsefMwNYIDbGSUrLFDbWcFJ4C8qJvxDj"
  },
  "default_pull": ["to_process"],
  "default_push": ["archiwum", "backupy_zip"]
}
```

### 🧠 Rola aliasów:
- krótkie nazwy do folderów
- wykorzystywane przez skrypty synchronizujące (`gdrive_pull.sh`, `gdrive_push.sh`)
- pozwalają unikać twardych ID w kodzie

---

## 🌐 GitHub

### Repozytorium:
- `Quantum-Archives/QuantumArchives`

### Synchronizacja:
- `sync_github/` → zawartość pushowana do `main` lub `develop`
- konfiguracja z `.syncignore` (co nie ma iść do repo)
- tagi wersji / commitów przez `ishkarim_admin` lub terminal

---

## 🧪 Przykładowe komendy systemowe
```bash
# Synchronizacja z Drive (domyślna)
./gdrive_push.sh

# Synchronizacja z aliasem
./gdrive_pull.sh grafiki

# Synchronizacja z GitHub
./github_sync.sh
```

---

## 🧠 Planowane rozwinięcia:
- integracja z Ishkarim Terminalem (komendy typu `sync drive --alias=archiwum`)
- historia synchronizacji (timestampy + logi)
- możliwość przeglądu zawartości folderów Drive/Git z poziomu GUI

## ✅ Status:
System aliasów gotowy do wdrożenia. Synchronizacja GDrive i GitHub wymaga tylko uzupełnienia tokenów i plików `.sh`.
